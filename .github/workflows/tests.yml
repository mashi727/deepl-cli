name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,clipboard]
    
    - name: Lint with flake8
      run: |
        flake8 src tests
    
    - name: Type check with mypy
      run: |
        mypy src
    
    - name: Format check with black
      run: |
        black --check src tests
    
    - name: Run tests with pytest
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_TEST_API_KEY }}
      run: |
        pytest -v --cov --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Security check with bandit
      run: |
        bandit -r src -f json -o bandit-report.json
    
    - name: Check dependencies with safety
      run: |
        safety check --json

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .[clipboard]
    
    - name: Integration tests
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      run: |
        # Test basic translation
        echo "Hello, world!" | deepl-cli JA
        
        # Test file translation
        echo "Test content" > test.txt
        deepl-cli DE test.txt -o output.txt
        test -f output.txt
        
        # Test language listing
        deepl-cli --list-languages
        
        # Test usage (if API key is set)
        if [ ! -z "$DEEPL_API_KEY" ]; then
          deepl-cli --usage
        fi
